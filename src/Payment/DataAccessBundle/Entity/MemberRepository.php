<?php	

namespace Payment\DataAccessBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * MemberRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MemberRepository extends EntityRepository
{
	public function findMemberByParametersToList($memberName, $memberLastname ,$memberDocumentNumber, $active, $offset, $limit, $count = true)
	{
		$queryBuilder = $this->getEntityManager()->createQueryBuilder('m');
		if ($count) 
		{
			$queryBuilder->add('select', $queryBuilder->expr()->count('m.id'));
		} 
		else 
		{
			$queryBuilder->add('select', 'm');
			$queryBuilder->orderBy('m.name');
			$queryBuilder->setFirstResult($offset);
			$queryBuilder->setMaxResults($limit);
		}
		$queryBuilder->add('from', 'PaymentDataAccessBundle:Member m');
		if ($active == false)
		{
			$queryBuilder->where($queryBuilder->expr()->eq('m.isActive', '1'));			
		} 
		
		if ($memberName != null) 
		{
			$memberName = str_replace(' ', '%', $memberName);
			$memberName = '%' . strtolower($memberName) . '%';
			if ($active == false)
			{
				$queryBuilder->andwhere($queryBuilder->expr()->like($queryBuilder->expr()->lower('m.name'), '?1'));
			}
			else
			{
				$queryBuilder->where($queryBuilder->expr()->like($queryBuilder->expr()->lower('m.name'), '?1'));
			}
			$queryBuilder->setParameter(1, $memberName);
		}
		
		if ($memberLastname != null)
		{
			$memberLastname = str_replace(' ', '%', $memberLastname);
			$memberLastname = '%' . strtolower($memberLastname) . '%';
			$queryBuilder->andWhere($queryBuilder->expr()->like($queryBuilder->expr()->lower('m.lastname'), '?2'));
			$queryBuilder->setParameter(2, $memberLastname);
		}
		
		if ($memberDocumentNumber != null)
		{
			$memberDocumentNumber = str_replace(' ', '%', $memberDocumentNumber);
			$memberDocumentNumber = '%' . strtolower($memberDocumentNumber) . '%';
			$queryBuilder->andWhere($queryBuilder->expr()->like($queryBuilder->expr()->lower('m.documentNumber'), '?3'));
			$queryBuilder->setParameter(3, $memberDocumentNumber);
		}
		$query = $queryBuilder->getQuery();
		$result = $query->getResult();
		return $result;
	}	
	
	public function findMemberByParameterToList($controller, $orderOption, $to, $from, $offset, $limit, $count = true)
	{
		if (!$to)
		{
			$to = $offset;			
		}
		if (!$from)
		{
			$from = $limit;
		}
/*		else
		{
			$from++;
		}*/
			
		$conec = $controller->get("database_connection");
		if ($orderOption == 1)
		{
			$memberId = " distinct(member.id), ";
			$order = " member.is_active = 1  order by member.lastname ";			
		}
		else
		{
			$memberId = "";
			$order = " account.is_active = 1 order by account.account_number ";			
		}
		
		if ($count == true)	
		{
			$sql = "select count(*) as total from (select". $memberId." member.document_number, member.name, member.lastname, member.address, account.account_number ";
		}
		else
		{
			$sql = "select * from (select". $memberId." member.document_number, member.name, member.lastname, member.address, account.account_number ";		
		}
		$sql.= "from account
				inner join member on member.id = account.member_id
				where".$order." limit ".$to.",".$from.") as val limit ". $offset.",".$limit;
		
		$result =  $conec->fetchAll($sql);
		return $result;
		
		/*$queryBuilder = $this->getEntityManager()->createQueryBuilder('a');
		if ($count)
		{
			$queryBuilder->add('select', $queryBuilder->expr()->count('a.id'));
		}
		else
		{
			$queryBuilder->select(array('a', 'm'));
			if ($orderOption == 1)
			{
				$queryBuilder->orderBy('m.lastname');
			}
			if ($orderOption == 2)
			{
				$queryBuilder->orderBy('a.accountNumber');
			}
			$queryBuilder->setFirstResult($offset);
			$queryBuilder->setMaxResults($limit);
		}
		$queryBuilder->add('from', 'PaymentDataAccessBundle:Account a');
		$queryBuilder->leftJoin('a.member', 'm');
		$queryBuilder->where($queryBuilder->expr()->eq('m.isActive', '1'));
		$query = $queryBuilder->getQuery();
		$result = $query->getResult();
		return $result;*/
	}	
}