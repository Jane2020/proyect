<?php

namespace Payment\DataAccessBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * ConsumptionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ConsumptionRepository extends EntityRepository
{
	public function findconsumptionByNameToList($consumptionSelect, $offset, $limit, $operator, $count = true ) {
	
		$queryBuilder = $this->getEntityManager()->createQueryBuilder('c');
		if ($count) {
			$queryBuilder->add('select', $queryBuilder->expr()->count('c.id'));
		} else {
			$queryBuilder->add('select', 'c');
			$queryBuilder->orderBy('c.id','DESC');
			$queryBuilder->setFirstResult($offset);
			$queryBuilder->setMaxResults($limit);
		}
		$queryBuilder->add('from', 'PaymentDataAccessBundle:Consumption c');			
		
		$queryBuilder->Where('c.isDeleted = 0');
		
		if ($consumptionSelect != null) {
			$queryBuilder->andWhere('c.account = ?1');
			$queryBuilder->setParameter(1, $consumptionSelect);	
		}
		if ($operator)
		{
			$queryBuilder->innerJoin('PaymentDataAccessBundle:Parameter', 'p', 'WITH', "p.key = 'date_start_consumption'");
			$queryBuilder->innerJoin('PaymentDataAccessBundle:Parameter', 'p1', 'WITH', "p1.key = 'date_end_consumption'");
			$queryBuilder->andWhere('c.systemDate >= p.value');
			$queryBuilder->andWhere("c.systemDate <= DATE_ADD(p1.value,1,'day')");
		}	
		
		$query = $queryBuilder->getQuery();
		$result = $query->getResult();
		return $result;
	}
	
	public function findPrevious($consumption)
	{
		if ($consumption->getId() > 1)
		{
			return $consumption->getMeterPreviousReading();
		}
		
		$queryBuilder = $this->getEntityManager()->createQueryBuilder('c');
		$queryBuilder->add('select', 'c');
		$queryBuilder->orderBy('c.id','DESC');
		$queryBuilder->setFirstResult(0);
		$queryBuilder->setMaxResults(1);		
		$queryBuilder->add('from', 'PaymentDataAccessBundle:Consumption c');		
		$queryBuilder->Where('c.isDeleted = 0');
		$queryBuilder->andWhere('c.account = ?1');
		$queryBuilder->setParameter(1, $consumption->getAccount());			
		$query = $queryBuilder->getQuery();
		$result = $query->getResult();
		return $result;
	}
	
	public function findByConsumption($accountId)
	{
		$queryBuilder = $this->getEntityManager()->createQueryBuilder('c');
		$queryBuilder->add('select', 'c');
		$queryBuilder->orderBy('c.id','ASC');
		$queryBuilder->add('from', 'PaymentDataAccessBundle:Consumption c');
		$queryBuilder->Where('c.isDeleted = 0');
		$queryBuilder->andWhere('c.account = ?1');
		$queryBuilder->setParameter(1, $accountId);
		$query = $queryBuilder->getQuery();
		$result = $query->getResult();
		return $result;		
	}
	
	public function reviewConsumptionByAccount($account, $date, $consumptionId)
	{
		$date .= '%';
		$queryBuilder = $this->getEntityManager()->createQueryBuilder('c');
		$queryBuilder->add('select', 'c');		
		$queryBuilder->add('from', 'PaymentDataAccessBundle:Consumption c');		
		$queryBuilder->Where('c.isDeleted = 0');
		$queryBuilder->andWhere('c.account = ?1');
		$queryBuilder->andWhere("c.readDate like ?2");
		
		$queryBuilder->setParameter(1, $account);
		$queryBuilder->setParameter(2, $date);
		if($consumptionId > 0){
			$queryBuilder->andWhere("c.id <> ?3");
			$queryBuilder->setParameter(3, $consumptionId);
		}
		$query = $queryBuilder->getQuery();
		$result = $query->getResult();
		return $result;
		
	}

}